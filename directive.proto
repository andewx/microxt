//directive.proto
syntax = 'proto3';
package proto;
option go_package = "./proto";

//const int32 max_description_size = 256;
//const int32 max_directive_payload = 50;
message header{
    int32 device_id = 1;
    int32 conversation_id = 2;
    int32 device_status = 3;
    int32 ip_addr = 4;
}


message handshake{
    header uuid = 1;
    string password = 2; //max 256
}

message directive{
    header uuid = 1;
    string description = 2;
    string cmd = 3;
    int32 size = 4;
    bytes payload = 5; //Embedded has buffer limits of max_size
}


message sync{
    header uuid = 1;
    int32 mutual_parameter_id =2;
    int32 set_value = 3;
}

message stream_config{
    header uuid = 1;
    int32 stream_id = 2;
    int32 frame_size = 3;
    int32 frames_per_second = 4;
    int32 frames_per_report = 5;
    int32 init_stream = 6;
    int32 init_velocity = 7;
    int32 frame_count = 8;
}

enum stream_status{
    OK = 0;
    ERROR = 1;
    JAM = 2;
    FREE = 3;
    START = 4;
    STOP = 5;
}

message stream_report{
    header uuid = 1;
    int32 actual_frame_per = 2;
    stream_status status = 3;
}




//embedded payloads processor
message payload_data{

    enum payload_type{
        ADC = 0;
        FFT = 1;
        PDAT = 2;
        DDAT = 3;
        FRAME_DONE = 4;
        RADAR_CONFIG = 5;
    }
    header uuid = 1;
    payload_type id = 2;
    int32 size = 3;
    bytes payload = 4;
}

message adc_data{
    header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message fft_data{
    header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message pdat_data{
    header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message ddat_data{
    header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message frame_done{
      header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message radar_config_data{
    header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}

message ack{
       header uuid = 1;
    int32 size = 2;
    bytes payload = 3;
}



